/*+----------------------------------------------------------------+
  |	Title:		BmpGenParam.hpp [共通環境]
  |	Comment:	BMP生成パラメータ（※BMP生成に必要な全パーツ情報を保持する）
  |	Author:		K.Takayanagi
  +----------------------------------------------------------------+*/
/*+----------------------------------------------------------------+
  |	Header Define	ヘッダ定義
  +----------------------------------------------------------------+*/
#ifndef __BMP_GEN_PARAM_HPP__
#define __BMP_GEN_PARAM_HPP__

/*+----------------------------------------------------------------+
  |	Include		インクルードヘッダ
  +----------------------------------------------------------------+*/
#include "env.hpp"

#include "draw/bmp/dot/BmpDotPartData.hpp"

/*+----------------------------------------------------------------+
  |	Define		デファイン定義
  +----------------------------------------------------------------+*/
//---------------------------------------------------
// セル数（※十分な余裕をもって[FgTop]が生成できる数）
//---------------------------------------------------
// TODO:処理が固まったら調整
#define BMP_GEN_PARAM_CELL_MAX          128

/*+----------------------------------------------------------------+
  |	Struct		構造体定義
  +----------------------------------------------------------------+*/
//-----------------------------------------------------------------
// 生成パラメータ１要素（※１つのパーツを描画するのに必要な情報を固めたもの）
//-----------------------------------------------------------------
struct stBMP_GEN_PARAM_CELL{
    //-------------------------------------------------------------
    // 基本パラメータ
    //-------------------------------------------------------------
    CBmpDotPartData* pData;         // BMP画素パーツデータへの参照（※[NULL]で無効）
    CBmpDotPartData* pDataRef;      // 参照データ（※[NULL]で無効）

    eBD_SLOT slot;                  // 対象スロット（※[pData/pDataRef]が有効な場合、[getSlot]の値と[slot]の値が一致することが保証される）
    int slotIndex;                  // 対象スロットインデックス
    
    float adjForT;                  // テンション調整
    float adjForS;                  // サイズ調整

    //-------------------------------------------------------------
    // 参照パラメータ（※他のパーツの表示／スロットを使い回す設定）
    //-------------------------------------------------------------
    bool isRefDrawValid;            // 参照先のレイヤーを描画するか？
    bool isRefSlotValid;            // 参照先のスロットを呼び出すか？
    float refScale;                 // 参照スケール
    float refRot;                   // 参照回転

    //-------------------------------------------------------------
    // TODO:パレット（※パーツ内の各要素の色味を指定）
    //-------------------------------------------------------------

    //-------------------------------------------------------------
    // 管理用フラグ
    //-------------------------------------------------------------
    bool isIgnore;                  // 処理をしない（※[HdCap]有効時に[HdTop]をスキップする等）
    bool isCovered;                 // カバーフラグ（※関連するカバー素材が存在する）
    bool isDone;                    // 処理済みフラグ（※スロットの参照が循環しないためのワーク）
};

//------------------------------------------------------------------
// 構造体の操作：クリア
//------------------------------------------------------------------
#define CLEAR_BMP_GEN_PARAM_CELL( _pCell )                  \
    memset( (_pCell), 0, sizeof(stBMP_GEN_PARAM_CELL) );    \
    (_pCell)->refScale = 1.0f

//------------------------------------------------------------------
// 構造体の操作：有効性の確認
//------------------------------------------------------------------
#define CHECK_BMP_GEN_PARAM_CELL( _pCell, _slot, _slotIndex )  ((_pCell)->slot==(_slot) && (_pCell)->slotIndex==(_slotIndex))

/*+----------------------------------------------------------------+
  |	Class		クラス定義
  +----------------------------------------------------------------+*/
//----------------------------------------
// BMP生成パラメータ
//----------------------------------------
class CBmpGenParam{
protected:
    // フォーム（※登録セルの並びの検出用）
    eBD_FORM m_eForm;       // 参照するフォーム
    bool m_bSuited;         // スーツ（着ぐるみ）か？
    bool m_bHideOverHair;   // はみ出る髪を隠すか？

    // 登録セル（※[CBmpDotPartData]毎に設定される）
    int m_nCellNumUse;
	stBMP_GEN_PARAM_CELL m_stArrCell[BMP_GEN_PARAM_CELL_MAX];
    
public:
	// コンストラクタ＆デストラクタ
	CBmpGenParam( void );
    virtual ~CBmpGenParam( void ){}

	// クリア
	void clear( void );
	void clearCell( eBD_SLOT slot, int slotIndex );
    
    // ワークフラグリセット
    void resetForWork( void );
    
    // 設定
    inline void setForm( eBD_FORM form ){ m_eForm = form; }
    inline void setSuited( bool flag ){ m_bSuited = flag; }
    inline void setHideOverHair( bool flag ){ m_bHideOverHair = flag; }
    
    // 取得
    inline eBD_FORM getForm( void ){ return( m_eForm ); }
    inline bool isSuited( void ){ return( m_bSuited ); }
    inline bool isHideOverHair( void ){ return( m_bHideOverHair ); }

	// セル関連
    inline int getCellNumMax( void ){ return( BMP_GEN_PARAM_CELL_MAX ); }
	inline int getCellNumUse( void ){ return( m_nCellNumUse ); }
    inline stBMP_GEN_PARAM_CELL* getCellArr( void ){ return( m_stArrCell ); }

    //--------------------------------------------------------------
    // パーツの追加（※返値は追加されたセル=必要があれば呼び出し元で追加設定する）
    //--------------------------------------------------------------
    stBMP_GEN_PARAM_CELL* addCell( stBD_PART_SEARCH_PARAM* pParam, int slotIndex, float adjForT, float adjForS );

    //--------------------------------------------------------------
	// 登録パーツの検索
    //--------------------------------------------------------------
	stBMP_GEN_PARAM_CELL* searchCell( eBD_SLOT slot, int slotIndex );
};

/*+----------------------------------------------------------------+
  |	Global		グローバルデータ型定義
  +----------------------------------------------------------------+*/
/*+----------------------------------------------------------------+
  |	Prototype	プロトタイプ宣言
  +----------------------------------------------------------------+*/
#endif	// __BMP_GEN_PARAM_HPP__
