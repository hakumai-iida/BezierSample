/*+----------------------------------------------------------------+
  |	Title:		FillConst.hpp [共通環境]
  |	Comment:	塗り定数
  |	Author:		K.Takayanagi
  +----------------------------------------------------------------+*/
/*+----------------------------------------------------------------+
  |	Header Define	ヘッダ定義
  +----------------------------------------------------------------+*/
#ifndef __FILL_CONST_HPP__
#define __FILL_CONST_HPP__

/*+----------------------------------------------------------------+
  |	Include		インクルードヘッダ
  +----------------------------------------------------------------+*/
#include "env.hpp"

/*+----------------------------------------------------------------+
  |	Define		デファイン定義
 +----------------------------------------------------------------+*/
//------------------------------------
// 塗りタイプ
//------------------------------------
enum eFILL_TYPE{
    eFILL_TYPE_INVALID = -1,    // 無効値

    eFILL_TYPE_OFF,             // オフ（※色を出力しない＝テスト用に下塗りだけしたい場合）
    eFILL_TYPE_MONO,            // 単色塗り（※色テスト付き）
    
    eFILL_TYPE_MAX,
};

#define IS_FILL_TYPE_VALID( _t )        ((_t)>=(eFILL_TYPE)0 && (_t)<eFILL_TYPE_MAX)

//-----------------------------------------------------------
// 塗りオプション（※特殊な処理をしたい場合オプションとして指定する）
//-----------------------------------------------------------
enum eFILL_OPTION{
    eFILL_OPTION_INVALID = -1,              // 無効値

    //--------------------------------------------------------------------
    // 出力色に対する追加処理
    //（※ストロークでの処理のため塗りガイドに影響しない）
    // 利用イメージ：小さなハイライト／塗り境界のアンチ（ぼかし）
    //--------------------------------------------------------------------
    eFILL_OPTION_POINT_AFTER_FILL,          // 領域内にドットの出力
    eFILL_OPTION_ANTI_STROKE_AFTER_FILL,    // 領域外にストロークの出力

    //--------------------------------------------------------------------
    // 領域補正（※領域に対して色の補正を行う）
    //（※テスト色を指定しない場合、領域内の出力済みの色が全て補正される）
    // 利用イメージ：ストロークで形状を指定した補正（色をまたいで広域を補正したい場合）
    //--------------------------------------------------------------------
    eFILL_OPTION_AREA,

    //--------------------------------------------------------------------
    // 出力色による補正予約（※出力色バッファをずらして被せ、未出力の領域に明暗予約をする）
    //（※この処理との兼ね合いにで塗りバッファのクリア色が0ではない点に注意）
    // 利用イメージ：前髪を描いた後に影の予約（※その後の顔に、前髪の形の影がつく）
    //--------------------------------------------------------------------
    eFILL_OPTION_RESERVE,

    //--------------------------------------------------------------------
    // 出力領域への補正（※出力色バッファずらして被せ、無効色と重なった領域に明暗をつける）
    // 利用イメージ：顔を塗ったあと、顔の形状で影をつける
    //--------------------------------------------------------------------
    eFILL_OPTION_INTO,

    //--------------------------------------------------------------------
    // 色バッファ補正（※色バッファをずらして被せ、無効色と重なった領域に明暗をつける）
    // 利用イメージ：色塗りの最後に、色の形状に沿った明暗をつける
    //--------------------------------------------------------------------
    eFILL_OPTION_COLOR,
    
    //--------------------------------------------------------------------
    // マスク領域への書き込み（※特殊な色バッファ[FillGuard]への書き込みを想定）
    //--------------------------------------------------------------------
    eFILL_OPTION_MASK,                      // マスク塗り

    eFILL_OPTION_MAX,
};

#define IS_FILL_OPTION_VALID( _o )  ((_o)>=(eFILL_OPTION)0 && (_o)<eFILL_OPTION_MAX)

//-----------------------------------------------------------------------------
// [scanLineForUndercoat]から[fillUndercoat]へ渡すヒント（※無駄な検索を省くための情報）
//-----------------------------------------------------------------------------
// [scanLineForUndercoat]の検索時に、左側が閉じていた
#define FILL_UNDERCOAT_SCAN_HINT_CLOSE_LEFT     0x01

// [scanLineForUndercoat]の検索時に、右側が閉じていた
#define FILL_UNDERCOAT_SCAN_HINT_CLOSE_RIGHT    0x02

// [scanLineForUndercoat]には、下から上に移動してきた
#define FILL_UNDERCOAT_SCAN_HINT_MOVE_UP        0x10

// [scanLineForUndercoat]には、上から下に移動してきた
#define FILL_UNDERCOAT_SCAN_HINT_MOVE_DOWN      0x20

/*+----------------------------------------------------------------+
  |	Struct		構造体型宣言
  +----------------------------------------------------------------+*/
/*+----------------------------------------------------------------+
  |	Class		クラス定義
  +----------------------------------------------------------------+*/
/*+----------------------------------------------------------------+
  |	Global		グローバルデータ型定義
  +----------------------------------------------------------------+*/
extern const char* g_pArrLabelFillType[];
extern const char* g_pArrLabelFillOption[];

/*+----------------------------------------------------------------+
  |	Prototype	プロトタイプ宣言
  +----------------------------------------------------------------+*/
#endif	/* __FILL_CONST_HPP__ */
